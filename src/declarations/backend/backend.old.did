type TxReceipt = 
 variant {
   Err: ApiError;
   Ok: nat;
 };
type TokenId = nat64;
type OwnerResult = 
 variant {
   Err: ApiError;
   Ok: principal;
 };
type MintReceiptPart = 
 record {
   id: nat;
   token_id: TokenId;
 };
type MintReceipt = 
 variant {
   Err: ApiError;
   Ok: MintReceiptPart;
 };
type MetadataVal = 
 variant {
   BlobContent: blob;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   TextContent: text;
 };
type MetadataResult = 
 variant {
   Err: ApiError;
   Ok: MetadataDesc;
 };
type MetadataPurpose = 
 variant {
   Preview;
   Rendered;
 };
type MetadataPart = 
 record {
   data: blob;
   key_val_data: vec MetadataKeyVal;
   purpose: MetadataPurpose;
 };
type MetadataKeyVal = 
 record {
   key: text;
   val: MetadataVal;
 };
type MetadataDesc = vec MetadataPart;
type MarkResult = 
 variant {
   Err: ApiError;
   Ok: Mark;
 };
type Mark = 
 record {
   createdBy: principal;
   createdWhen: int;
   id: nat64;
 };
type LogoResult = 
 record {
   data: text;
   logo_type: text;
 };
type InterfaceId = 
 variant {
   Approval;
   Burn;
   Mint;
   TransactionHistory;
   TransferNotification;
 };
type ImprintType = 
 variant {
   BlobContent: blob;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   TextContent: text;
 };
type ImprintResult = 
 variant {
   Err: ApiError;
   Ok: Imprint;
 };
type Imprint = 
 record {
   createdBy: principal;
   createdWhen: int;
   data: ImprintType;
   id: nat64;
   tags: vec text;
 };
type ExtendedMetadataResult = 
 variant {
   Err: ApiError;
   Ok: record {
         metadata_desc: MetadataDesc;
         token_id: TokenId;
       };
 };
type Dip721NonFungibleToken = 
 record {
   logo: LogoResult;
   maxLimit: nat16;
   name: text;
   symbol: text;
 };
type ApiError = 
 variant {
   IdDoubloninArray;
   ImprintWithoutMark;
   InvalidArtworkId;
   InvalidImprintId;
   InvalidMarkId;
   InvalidTokenId;
   Other;
   Unauthorized;
   ZeroAddress;
 };
service : {
  balanceOfDip721: (principal) -> (nat64) query;
  createImprint: (vec nat64, ImprintType, vec text) -> (ImprintResult);
  createMark: () -> (Mark);
  getImprint: (nat64) -> (ImprintResult) query;
  getImprintIdsByMarkId: (nat64) -> (opt vec nat64) query;
  getImprintIdsByMarkIdTreeSize: () -> (nat) query;
  getImprintsTotalCount: () -> (nat64) query;
  getImprintsTreeSize: () -> (nat) query;
  getMark: (nat64) -> (MarkResult) query;
  getMarkIdsByImprintId: (nat64) -> (opt vec nat64) query;
  getMarkIdsByImprintIdTreeSize: () -> (nat) query;
  getMarksTotalCount: () -> (nat64) query;
  getMarksTreeSize: () -> (nat) query;
  getMaxLimitDip721: () -> (nat16) query;
  getMetadataDip721: (TokenId) -> (MetadataResult) query;
  getMetadataForUserDip721: (principal) -> (ExtendedMetadataResult);
  getTokenIdsForUserDip721: (principal) -> (vec TokenId) query;
  isImprintExist: (nat64) -> (bool) query;
  isMarkExist: (nat64) -> (bool) query;
  logoDip721: () -> (LogoResult) query;
  mintDip721: (principal, MetadataDesc) -> (MintReceipt);
  nameDip721: () -> (text) query;
  ownerOfDip721: (TokenId) -> (OwnerResult) query;
  safeTransferFromDip721: (principal, principal, TokenId) -> (TxReceipt);
  supportedInterfacesDip721: () -> (vec InterfaceId) query;
  symbolDip721: () -> (text) query;
  totalSupplyDip721: () -> (nat64) query;
  transferFromDip721: (principal, principal, TokenId) -> (TxReceipt);
  whoami: () -> (principal) query;
}
