type SandBless = 
 service {
   createImprint: (vec nat64, ImprintType, vec text) -> (ImprintResult);
   createMark: () -> (Mark);
   getImprint: (nat64) -> (ImprintResult) query;
   getImprintIdsByMarkId: (nat64) -> (opt vec nat64) query;
   getImprintIdsByMarkIdTreeSize: () -> (nat) query;
   getImprintsTotalCount: () -> (nat64) query;
   getImprintsTreeSize: () -> (nat) query;
   getMark: (nat64) -> (MarkResult) query;
   getMarkIdsByImprintId: (nat64) -> (opt vec nat64) query;
   getMarkIdsByImprintIdTreeSize: () -> (nat) query;
   getMarksTotalCount: () -> (nat64) query;
   getMarksTreeSize: () -> (nat) query;
   isImprintExist: (nat64) -> (bool) query;
   isMarkExist: (nat64) -> (bool) query;
   whoami: () -> (principal) query;
 };
type MarkResult = 
 variant {
   Err: ApiError;
   Ok: Mark;
 };
type Mark = 
 record {
   createdBy: principal;
   createdWhen: int;
   id: nat64;
 };
type ImprintType = 
 variant {
   BlobContent: blob;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   TextContent: text;
 };
type ImprintResult = 
 variant {
   Err: ApiError;
   Ok: Imprint;
 };
type Imprint = 
 record {
   createdBy: principal;
   createdWhen: int;
   data: ImprintType;
   id: nat64;
   tags: vec text;
 };
type ApiError = 
 variant {
   IdDoubloninArray;
   ImprintWithoutMark;
   InvalidImprintId;
   InvalidMarkId;
   Other;
   Unauthorized;
 };
service : () -> SandBless
